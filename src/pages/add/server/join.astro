---
import { validateStoken } from '@/lib/Actions';
const payload = validateStoken(Astro.cookies.get('portals:stoken')?.value);
if (!payload) return Astro.redirect('/');

import HomeLayout from '@/layouts/HomeLayout.astro';
import PathAnchor from '@/components/PathAnchor.astro';
import ServerJoinCard from '@/components/CreateConnect/ServerJoinCard.astro';
import JoinSubmitter from '@/components/CreateConnect/JoinSubmitter';
import { BACKEND_URL } from '@/public.env';
import { GetServersByQuery, GetUserServers } from '@/lib/APIcalls';

const userServers = await GetUserServers(BACKEND_URL, JSON.stringify(payload));

const servers = await GetServersByQuery(BACKEND_URL, JSON.stringify(payload), {
	isPublic: true,
});
---

<HomeLayout payload={payload}>
	<div slot="path" id="path">
		<PathAnchor href="/servers" text="Servers">
			<img src="/group.svg" width="20" height="20" alt="" />
		</PathAnchor>
		<img src="/pac.svg" width="15" height="15" alt="" />
		<PathAnchor href="/add/server" text="Connect & Create">
			<img src="/dots.svg" width="20" height="20" alt="" />
		</PathAnchor>
		<img src="/pac.svg" width="15" height="15" alt="" />
		<PathAnchor text="Join Server">
			<img src="/add.svg" width="20" height="20" alt="" />
		</PathAnchor>
	</div>
	<div slot="nav" id="nav">
		<h3>Finding a server</h3>
		<p>
			You can find servers by their <strong>Name</strong> or <strong>ID</strong>
		</p>
		<br />
		<p>
			Also there are some servers that appear in the <strong
				>Public section</strong
			>
		</p>
		<br />
		<p>
			There is no need to join here if your friends pass you the <strong
				>Ivitation Link :)</strong
			>
		</p>
		<br />
		<p>you have friends rigth? ..</p>
	</div>
	<div slot="main" id="main">
		<header>
			<h3>Public servers</h3>
		</header>
		<article>
				{
					servers ? (
						servers.map((sv) => {
							return (
								<ServerJoinCard server={sv} userServerList={userServers} />
							);
						})
					) : (
						<p>No public servers yet..</p>
					)
				}
		</article>
		<footer>
			<form autocomplete="off" id="formID">
				<label for="server">Name or ID</label>
				<input required autofocus type="text" name="serverID" />
				<button type="submit"><p>Join</p></button>
			</form>
		</footer>
		<JoinSubmitter
			URL={BACKEND_URL}
			userID={payload.user._id.toString()}
			client:only="react"
		/>
	</div>
</HomeLayout>

<style lang="scss">
	#path {
		display: flex;
		align-items: center;

		gap: 10px;
	}
	#nav {
		width: 70%;

		letter-spacing: 0.1rem;
	}
	#main {
		display: grid;
		grid-template-rows: 1fr 30rem 1fr;
		gap: 20px;

		height: 100%;
		width: 100%;

		& header {
			display: flex;
			align-items: center;
			padding: 0 1rem;

			letter-spacing: 0.1rem;
			& h3 {
				font-size: 40px;
			}
		}

		& article {
			display: flex;
			align-items: start;
			flex-wrap: wrap;

			height: 100%;
			width: calc(100% - 1rem);

			gap: 10px;
			padding: 0 1rem;
		}

		& footer {
			display: flex;
			align-items: center;
			justify-content: center;

			border-top: solid 0.2rem var(--background-base);

			& form {
				display: flex;
				align-items: center;

				gap: 1rem;

				& input {
					padding: 0.2rem;
					border: 0;
					border-radius: 1rem;

					text-align: center;
					font-size: 20px;
					background-color: var(--background-elevated-base);
				}
				& input:is(:hover, :focus, :valid) {
					outline: 0;

					padding: 0.5rem;
				}

				& button {
					padding: 0.5rem 1rem;
					border: 0;
					border-radius: 1rem;

					cursor: pointer;
					background-color: var(--background-elevated-base);
				}
				& button:hover {
					background-color: var(--essential-positive);
				}
			}
		}
	}
</style>
