---
export const prerender = false;

import { validateStoken } from '@/lib/Actions';
const payload = validateStoken(Astro.cookies.get('portals:stoken')?.value);
const { svId, chanId } = Astro.params;
if (!payload || !svId || !chanId) return Astro.redirect('/');

import HomeLayout from '@/layouts/HomeLayout.astro';
import PathAnchor from '@/components/PathAnchor.astro';
import ChatReact from '@/components/Channels/ChatReact';
import ChatReactNav from '@/components/Channels/navs/ChatReacNav';
import VoiceCallReact from '@/components/Channels/VoiceCallReact';
import VideoCallReact from '@/components/Channels/VideoCallReact';
import { BACKEND_URL, WEBSOCKET_URL } from '@/public.env';
import { GetChannelInfo } from '@/lib/APIcalls';

const { server, channel } = await GetChannelInfo(
	BACKEND_URL,
	JSON.stringify(payload),
	svId,
	chanId
);
const is = {
	text: '/text.svg',
	voice: '/micOn.svg',
	video: '/video.svg',
};
---

<HomeLayout payload={payload}>
	<div slot="path" id="path">
		<PathAnchor text="Servers" href="/servers">
			<img src="/group.svg" width="20" height="20" alt="" />
		</PathAnchor>
		<img src="/pac.svg" width="15" height="15" alt="" />
		<PathAnchor text={server.name.toString()} href={`/servers/${svId}`}>
			<img src="/group.svg" width="20" height="20" alt="" />
		</PathAnchor>
		<img src="/pac.svg" width="15" height="15" alt="" />
		<PathAnchor text={channel.name.toString()}>
			<img src={is[channel.is] || '/dots.svg'} width="20" height="20" alt="" />
		</PathAnchor>
	</div>
	<div slot="nav" id="nav">
		{
			channel.is === 'text' ? (
				<ChatReactNav client:only="react" userID={payload.user._id.toString()} />
			) : channel.is === 'voice' ? (
				'voice nav'
			) : channel.is === 'video' ? (
				'video nav'
			) : (
				'error'
			)
		}
	</div>
	<div slot="main" id="main">
		{
			channel.is === 'text' ? (
				<ChatReact
					client:only="react"
					chanID={chanId}
					serverID={svId}
					userID={payload.user._id.toString()}
					URL={BACKEND_URL}
					WSDIR={WEBSOCKET_URL}
				/>
			) : channel.is === 'voice' ? (
				<VoiceCallReact client:only="react" />
			) : channel.is === 'video' ? (
				<VideoCallReact client:only="react" />
			) : (
				'error'
			)
		}
	</div>
</HomeLayout>

<style lang="scss">
	#path {
		display: flex;
		align-items: center;

		gap: 10px;
	}
	#nav {
		display: grid;
		place-items: center;

		height: 100%;
		width: 100%;
	}
	#main {
		display: flex;
		align-items: end;
		justify-content: center;

		height: 100%;
		width: 100%;
	}
</style>
